package main

import (
	"archive/tar"
	"bytes"
	"text/template"
	"time"
)

// DockerFile can be rendered into a dockerfile
type DockerFile struct {
	From string
	Run  []string
	User string
	Cmd  string
}

const dockerFile = `#
# Autogenerated Dockerfile by Docquer
#

{{template "from" .From}}
{{range .Run}}
{{template "run" .}}
{{end}}
{{template "user" .User}}
{{template "cmd" .Cmd}}
`
const fromTmpl = `FROM {{.}}`
const runTmpl = `RUN {{.}}`
const userTmpl = `USER {{.}}`
const cmdTmpl = `CMD {{.}}`

// MakeDockerfile s
func MakeDockerfile(d DockerFile) *bytes.Buffer {
	// TODO error checking

	dt := template.Must(template.New("dockerfile").Parse(dockerFile))
	dt.New("from").Parse(fromTmpl)
	dt.New("run").Parse(runTmpl)
	dt.New("user").Parse(userTmpl)
	dt.New("cmd").Parse(cmdTmpl)

	buf := new(bytes.Buffer)

	dt.Execute(buf, d)

	return buf
}

// GetTarBuf to
func GetTarBuf(d DockerFile) (*bytes.Buffer, error) {
	// TODO error checking
	b := MakeDockerfile(d)
	t := time.Now()

	buf := new(bytes.Buffer)
	tr := tar.NewWriter(buf)
	tr.WriteHeader(&tar.Header{
		Name:       "Dockerfile",
		Size:       int64(b.Len()),
		ModTime:    t,
		AccessTime: t,
		ChangeTime: t,
	})
	tr.Write(b.Bytes())

	tr.Close()
	return buf, nil
}
